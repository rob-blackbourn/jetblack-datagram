{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UDP Datagram library \u00b6 A Python 3 asyncio helper library for UDP datagram clients and servers.","title":"UDP Datagram library"},{"location":"#udp-datagram-library","text":"A Python 3 asyncio helper library for UDP datagram clients and servers.","title":"UDP Datagram library"},{"location":"api/jetblack_datagram/","text":"async function jetblack_datagram . create_datagram_server \u00b6 Summary \u00b6 Create a datagram server. async jetblack_datagram . create_datagram_server ( addr : Address , * , loop : Optional[AbstractEventLoop] , maxsize : int ) -> DatagramServer Parameters \u00b6 addr : Address The address of the server loop : Optional[AbstractEventLoop] (optional) The asyncio event loop. Defaults to None. maxsize : int (optional) The maximum size of the read queue. Defaults to 0. Returns \u00b6 DatagramServer : A datagram server. async function jetblack_datagram . create_datagram_client \u00b6 Summary \u00b6 Create a datagram client. async jetblack_datagram . create_datagram_client ( addr : Address , * , loop : Optional[AbstractEventLoop] , maxsize : int ) -> DatagramClient Parameters \u00b6 addr : Address The address of the server. loop : Optional[AbstractEventLoop] (optional) THe asyncio event loop. Defaults to None. maxsize : int (optional) The maximum size of the read queue. Defaults to 0. Returns \u00b6 DatagramClient : [description] class DatagramBase \u00b6 Summary \u00b6 Initialise the datagram base class jetblack_datagram . DatagramBase ( base : DatagramProtocolImpl ) -> None Parameters \u00b6 base : DatagramProtocolImpl The datagram protocol implementation. method DatagramBase . close \u00b6 Summary \u00b6 Close the connection DatagramBase . close ( ) -> Any Returns \u00b6 Any : async method DatagramBase . read \u00b6 Summary \u00b6 Read a datagram async DatagramBase . read ( ) -> Tuple[bytes, Address] Returns \u00b6 Tuple[bytes, Address] : THe message and address of the sender. async method DatagramBase . wait_closed \u00b6 Summary \u00b6 Wait until the connection is closed. Description \u00b6 Can be called after closing the connection. async DatagramBase . wait_closed ( ) -> Any Returns \u00b6 Any : class DatagramServer ( DatagramBase ) \u00b6 Summary \u00b6 Initialise the datagram base class jetblack_datagram . DatagramServer ( base : DatagramProtocolImpl ) -> None Parameters \u00b6 base : DatagramProtocolImpl The datagram protocol implementation. method DatagramServer . close \u00b6 Summary \u00b6 Close the connection DatagramServer . close ( ) -> Any Returns \u00b6 Any : async method DatagramServer . read \u00b6 Summary \u00b6 Read a datagram async DatagramServer . read ( ) -> Tuple[bytes, Address] Returns \u00b6 Tuple[bytes, Address] : THe message and address of the sender. method DatagramServer . sendto \u00b6 Summary \u00b6 Send a datagram DatagramServer . sendto ( data : bytes , addr : Union[Address, str] ) -> Any Parameters \u00b6 data : bytes The data to send addr : Union[Address, str] The address of the recipient. Returns \u00b6 Any : async method DatagramServer . wait_closed \u00b6 Summary \u00b6 Wait until the connection is closed. Description \u00b6 Can be called after closing the connection. async DatagramServer . wait_closed ( ) -> Any Returns \u00b6 Any : class DatagramClient ( DatagramBase ) \u00b6 Summary \u00b6 Initialise the datagram base class jetblack_datagram . DatagramClient ( base : DatagramProtocolImpl ) -> None Parameters \u00b6 base : DatagramProtocolImpl The datagram protocol implementation. method DatagramClient . close \u00b6 Summary \u00b6 Close the connection DatagramClient . close ( ) -> Any Returns \u00b6 Any : async method DatagramClient . read \u00b6 Summary \u00b6 Read a datagram async DatagramClient . read ( ) -> Tuple[bytes, Address] Returns \u00b6 Tuple[bytes, Address] : THe message and address of the sender. method DatagramClient . send \u00b6 Summary \u00b6 Send the data to the server DatagramClient . send ( data : bytes ) -> Any Parameters \u00b6 data : bytes The data to send. Returns \u00b6 Any : async method DatagramClient . wait_closed \u00b6 Summary \u00b6 Wait until the connection is closed. Description \u00b6 Can be called after closing the connection. async DatagramClient . wait_closed ( ) -> Any Returns \u00b6 Any :","title":"jetblack_datagram"},{"location":"api/jetblack_datagram/#async-function-jetblack_datagramcreate_datagram_server","text":"","title":"async function jetblack_datagram.create_datagram_server"},{"location":"api/jetblack_datagram/#summary","text":"Create a datagram server. async jetblack_datagram . create_datagram_server ( addr : Address , * , loop : Optional[AbstractEventLoop] , maxsize : int ) -> DatagramServer","title":"Summary"},{"location":"api/jetblack_datagram/#parameters","text":"addr : Address The address of the server loop : Optional[AbstractEventLoop] (optional) The asyncio event loop. Defaults to None. maxsize : int (optional) The maximum size of the read queue. Defaults to 0.","title":"Parameters"},{"location":"api/jetblack_datagram/#returns","text":"DatagramServer : A datagram server.","title":"Returns"},{"location":"api/jetblack_datagram/#async-function-jetblack_datagramcreate_datagram_client","text":"","title":"async function jetblack_datagram.create_datagram_client"},{"location":"api/jetblack_datagram/#summary_1","text":"Create a datagram client. async jetblack_datagram . create_datagram_client ( addr : Address , * , loop : Optional[AbstractEventLoop] , maxsize : int ) -> DatagramClient","title":"Summary"},{"location":"api/jetblack_datagram/#parameters_1","text":"addr : Address The address of the server. loop : Optional[AbstractEventLoop] (optional) THe asyncio event loop. Defaults to None. maxsize : int (optional) The maximum size of the read queue. Defaults to 0.","title":"Parameters"},{"location":"api/jetblack_datagram/#returns_1","text":"DatagramClient : [description]","title":"Returns"},{"location":"api/jetblack_datagram/#class-datagrambase","text":"","title":"class DatagramBase"},{"location":"api/jetblack_datagram/#summary_2","text":"Initialise the datagram base class jetblack_datagram . DatagramBase ( base : DatagramProtocolImpl ) -> None","title":"Summary"},{"location":"api/jetblack_datagram/#parameters_2","text":"base : DatagramProtocolImpl The datagram protocol implementation.","title":"Parameters"},{"location":"api/jetblack_datagram/#method-datagrambaseclose","text":"","title":"method DatagramBase.close"},{"location":"api/jetblack_datagram/#summary_3","text":"Close the connection DatagramBase . close ( ) -> Any","title":"Summary"},{"location":"api/jetblack_datagram/#returns_2","text":"Any :","title":"Returns"},{"location":"api/jetblack_datagram/#async-method-datagrambaseread","text":"","title":"async method DatagramBase.read"},{"location":"api/jetblack_datagram/#summary_4","text":"Read a datagram async DatagramBase . read ( ) -> Tuple[bytes, Address]","title":"Summary"},{"location":"api/jetblack_datagram/#returns_3","text":"Tuple[bytes, Address] : THe message and address of the sender.","title":"Returns"},{"location":"api/jetblack_datagram/#async-method-datagrambasewait_closed","text":"","title":"async method DatagramBase.wait_closed"},{"location":"api/jetblack_datagram/#summary_5","text":"Wait until the connection is closed.","title":"Summary"},{"location":"api/jetblack_datagram/#description","text":"Can be called after closing the connection. async DatagramBase . wait_closed ( ) -> Any","title":"Description"},{"location":"api/jetblack_datagram/#returns_4","text":"Any :","title":"Returns"},{"location":"api/jetblack_datagram/#class-datagramserverdatagrambase","text":"","title":"class DatagramServer(DatagramBase)"},{"location":"api/jetblack_datagram/#summary_6","text":"Initialise the datagram base class jetblack_datagram . DatagramServer ( base : DatagramProtocolImpl ) -> None","title":"Summary"},{"location":"api/jetblack_datagram/#parameters_3","text":"base : DatagramProtocolImpl The datagram protocol implementation.","title":"Parameters"},{"location":"api/jetblack_datagram/#method-datagramserverclose","text":"","title":"method DatagramServer.close"},{"location":"api/jetblack_datagram/#summary_7","text":"Close the connection DatagramServer . close ( ) -> Any","title":"Summary"},{"location":"api/jetblack_datagram/#returns_5","text":"Any :","title":"Returns"},{"location":"api/jetblack_datagram/#async-method-datagramserverread","text":"","title":"async method DatagramServer.read"},{"location":"api/jetblack_datagram/#summary_8","text":"Read a datagram async DatagramServer . read ( ) -> Tuple[bytes, Address]","title":"Summary"},{"location":"api/jetblack_datagram/#returns_6","text":"Tuple[bytes, Address] : THe message and address of the sender.","title":"Returns"},{"location":"api/jetblack_datagram/#method-datagramserversendto","text":"","title":"method DatagramServer.sendto"},{"location":"api/jetblack_datagram/#summary_9","text":"Send a datagram DatagramServer . sendto ( data : bytes , addr : Union[Address, str] ) -> Any","title":"Summary"},{"location":"api/jetblack_datagram/#parameters_4","text":"data : bytes The data to send addr : Union[Address, str] The address of the recipient.","title":"Parameters"},{"location":"api/jetblack_datagram/#returns_7","text":"Any :","title":"Returns"},{"location":"api/jetblack_datagram/#async-method-datagramserverwait_closed","text":"","title":"async method DatagramServer.wait_closed"},{"location":"api/jetblack_datagram/#summary_10","text":"Wait until the connection is closed.","title":"Summary"},{"location":"api/jetblack_datagram/#description_1","text":"Can be called after closing the connection. async DatagramServer . wait_closed ( ) -> Any","title":"Description"},{"location":"api/jetblack_datagram/#returns_8","text":"Any :","title":"Returns"},{"location":"api/jetblack_datagram/#class-datagramclientdatagrambase","text":"","title":"class DatagramClient(DatagramBase)"},{"location":"api/jetblack_datagram/#summary_11","text":"Initialise the datagram base class jetblack_datagram . DatagramClient ( base : DatagramProtocolImpl ) -> None","title":"Summary"},{"location":"api/jetblack_datagram/#parameters_5","text":"base : DatagramProtocolImpl The datagram protocol implementation.","title":"Parameters"},{"location":"api/jetblack_datagram/#method-datagramclientclose","text":"","title":"method DatagramClient.close"},{"location":"api/jetblack_datagram/#summary_12","text":"Close the connection DatagramClient . close ( ) -> Any","title":"Summary"},{"location":"api/jetblack_datagram/#returns_9","text":"Any :","title":"Returns"},{"location":"api/jetblack_datagram/#async-method-datagramclientread","text":"","title":"async method DatagramClient.read"},{"location":"api/jetblack_datagram/#summary_13","text":"Read a datagram async DatagramClient . read ( ) -> Tuple[bytes, Address]","title":"Summary"},{"location":"api/jetblack_datagram/#returns_10","text":"Tuple[bytes, Address] : THe message and address of the sender.","title":"Returns"},{"location":"api/jetblack_datagram/#method-datagramclientsend","text":"","title":"method DatagramClient.send"},{"location":"api/jetblack_datagram/#summary_14","text":"Send the data to the server DatagramClient . send ( data : bytes ) -> Any","title":"Summary"},{"location":"api/jetblack_datagram/#parameters_6","text":"data : bytes The data to send.","title":"Parameters"},{"location":"api/jetblack_datagram/#returns_11","text":"Any :","title":"Returns"},{"location":"api/jetblack_datagram/#async-method-datagramclientwait_closed","text":"","title":"async method DatagramClient.wait_closed"},{"location":"api/jetblack_datagram/#summary_15","text":"Wait until the connection is closed.","title":"Summary"},{"location":"api/jetblack_datagram/#description_2","text":"Can be called after closing the connection. async DatagramClient . wait_closed ( ) -> Any","title":"Description"},{"location":"api/jetblack_datagram/#returns_12","text":"Any :","title":"Returns"},{"location":"user-guide/getting-started/","text":"Echo Server \u00b6 To create an echo server: import asyncio from jetblack_datagram import create_datagram_server async def main (): server = await create_datagram_server (( '127.0.0.1' , 9999 )) count = 0 while count < 5 : count += 1 print ( \"Reading\" ) data , addr = await server . read () print ( 'Received %r from %s ' % ( data , addr )) print ( 'Send %r to %s ' % ( data , addr )) server . sendto ( data , addr ) print ( \"Closing\" ) server . close () print ( \"Waiting for server to close\" ) await server . wait_closed () print ( \"Closed\" ) print ( \"Done\" ) if __name__ == '__main__' : asyncio . run ( main ()) To create an echo client: import asyncio from jetblack_datagram import create_datagram_client async def main (): client = await create_datagram_client (( '127.0.0.1' , 9999 )) print ( \"Sending data\" ) client . send ( b 'Hello, World!' ) print ( \"reading data\" ) data , addr = await client . read () print ( 'Received %r from %s ' % ( data , addr )) print ( \"closing client\" ) client . close () print ( \"waiting for client to close\" ) await client . wait_closed () if __name__ == '__main__' : asyncio . run ( main ())","title":"Getting started"},{"location":"user-guide/getting-started/#echo-server","text":"To create an echo server: import asyncio from jetblack_datagram import create_datagram_server async def main (): server = await create_datagram_server (( '127.0.0.1' , 9999 )) count = 0 while count < 5 : count += 1 print ( \"Reading\" ) data , addr = await server . read () print ( 'Received %r from %s ' % ( data , addr )) print ( 'Send %r to %s ' % ( data , addr )) server . sendto ( data , addr ) print ( \"Closing\" ) server . close () print ( \"Waiting for server to close\" ) await server . wait_closed () print ( \"Closed\" ) print ( \"Done\" ) if __name__ == '__main__' : asyncio . run ( main ()) To create an echo client: import asyncio from jetblack_datagram import create_datagram_client async def main (): client = await create_datagram_client (( '127.0.0.1' , 9999 )) print ( \"Sending data\" ) client . send ( b 'Hello, World!' ) print ( \"reading data\" ) data , addr = await client . read () print ( 'Received %r from %s ' % ( data , addr )) print ( \"closing client\" ) client . close () print ( \"waiting for client to close\" ) await client . wait_closed () if __name__ == '__main__' : asyncio . run ( main ())","title":"Echo Server"},{"location":"user-guide/installation/","text":"Installation \u00b6 Install using pip. pip install jetblack-datagram","title":"Installation"},{"location":"user-guide/installation/#installation","text":"Install using pip. pip install jetblack-datagram","title":"Installation"}]}